import java.time.ZonedDateTime

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'de.marcphilipp.nexus-publish'
if (!project.hasProperty('grgit')) {
  apply plugin: 'org.ajoberstar.grgit'
}

jar {
  manifest {
    attributes 'Implementation-Title': archivesBaseName
    attributes 'Implementation-Group': project.group
    attributes 'Implementation-Version': project.version
    attributes 'Built-By': System.getProperty('user.name')
    attributes 'Built-Date': ZonedDateTime.now()
    attributes 'Built-JDK': System.getProperty('java.version')
    attributes 'Built-JDK-Vendor': System.getProperty('java.specification.vendor')
    attributes 'Automatic-Module-Name': rootProject.group + '.' + project.name.replaceAll('-', '.')

    try {
      def head = grgit.head()
      attributes 'SCM-Repository': grgit.remote.list().find { it.name == 'origin' }?.url
      attributes 'SCM-Branch': grgit.branch.current().name
      attributes 'SCM-Commit': head.shortMessage
      attributes 'SCM-Commit-Hash': head.id
      attributes 'SCM-Commit-Author': "${head.author.name} <${head.author.email}>"
      attributes 'SCM-Commit-Date': head.dateTime
    } catch (IOException e) {
      attributes 'SCM-Repository': ''
      attributes 'SCM-Branch': ''
      attributes 'SCM-Commit': ''
      attributes 'SCM-Commit-Hash': ''
      attributes 'SCM-Commit-Author': ''
      attributes 'SCM-Commit-Date': ''
    }
  }

  from(rootProject.projectDir) {
    include "license.txt"
    into "META-INF"
    expand(
        copyright: new Date().format("yyyy"),
        version: project.version
    )
  }
}

task javadocJar(type: Jar) {
  from javadoc
  archiveClassifier = 'javadoc'
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier = 'sources'
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = archivesBaseName
      from components.java
      artifact sourcesJar
      artifact javadocJar

      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }

      pom {
        name = archivesBaseName
        description = project.description ?: rootProject.description
        url = 'https://github.com/coditory/sherlock-distributed-lock'
        organization {
          name = "Coditory"
          url = "https://coditory.com"
        }
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'pawel.mendelski'
            name = 'Pawel Mendelski'
            email = 'mendelski.pawel@gmail.com'
          }
        }
        scm {
          connection = 'scm:git@github.com:coditory/sherlock-distributed-lock.git'
          developerConnection = 'scm:git@github.com:coditory/sherlock-distributed-lock.git'
          url = 'https://github.com/coditory/sherlock-distributed-lock'
        }
        issueManagement {
          system = "GitHub"
          url = "https://github.com/coditory/sherlock-distributed-lock/issues"
        }
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}

if (System.env.GPG_KEY_ID) {
  project.ext['signing.keyId'] = System.env.GPG_KEY_ID
  project.ext['signing.password'] = System.env.GPG_PASSWORD
  project.ext['signing.secretKeyRingFile'] = System.env.GPG_KEY_RING_FILE
}

nexusPublishing {
  serverUrl = uri('https://oss.sonatype.org/service/local/')
  snapshotRepositoryUrl = uri('https://oss.sonatype.org/content/repositories/snapshots/')
}
