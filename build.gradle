buildscript {
  ext {
    versions = [
      reactor        : '3.3.0.RELEASE',
      rxjava         : '2.2.12',
      reactiveStreams: '1.0.2',
      mongodb        : '3.11.0',
      mongodbReactive: '1.12.0',
      slf4j          : '1.7.28',
      logback        : '1.2.3',
      postgresql     : '42.2.8',
      mysql          : '8.0.17',
      // test dependencies:
      testContainers : '1.12.3',
      groovy         : '2.5.8',
      spock          : '1.3-groovy-2.5'
    ]
    notPublishableModules = [
      ':api',
      ':sample',
      ':mongo',
      ':tests'
    ]
  }
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'jacoco'
  id 'signing'
  id 'pl.allegro.tech.build.axion-release' version '1.10.2'
  id 'com.gradle.build-scan' version '2.4.2'
  id 'com.github.kt3k.coveralls' version '2.8.4'
  id 'io.codearte.nexus-staging' version '0.21.1' apply false
  id 'com.coditory.integration-test' version '1.0.6' apply false
  id 'de.marcphilipp.nexus-publish' version '0.4.0' apply false
  id 'org.ajoberstar.grgit' version '3.1.1' apply false
}

description = 'Distributed Lock Library for JVM'

scmVersion {
  versionCreator 'versionWithBranch'
}

allprojects {
  group = 'com.coditory.sherlock'
  version = scmVersion.version

  repositories {
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'groovy'
  apply plugin: 'jacoco'
  apply plugin: 'com.coditory.integration-test'
  sourceCompatibility = 11

  // make nicer archive and module names
  archivesBaseName = rootProject.name + '-' + project.name
  ext.moduleName = archivesBaseName.replaceAll('-', '.')

  dependencies {
    testCompile "ch.qos.logback:logback-core:$versions.logback"
    testCompile "ch.qos.logback:logback-classic:$versions.logback"
    testCompile "org.codehaus.groovy:groovy-all:$versions.groovy"
    testCompile "org.spockframework:spock-core:$versions.spock"
  }

  tasks.withType(Test) {
    testLogging {
      showStandardStreams = true
      exceptionFormat = 'full'
      events = ['passed', 'skipped', 'failed']
    }
  }

  javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    failOnError = false
    options {
      memberLevel = JavadocMemberLevel.PUBLIC
      author = true
    }
  }
}

apply from: "gradle/scan.gradle"
apply from: "gradle/coverage.gradle"

if (project.hasProperty('publish')) {
  apply from: "gradle/publish.gradle"
}
